from __future__ import print_function
from fenics import *
from mshr import *
import numpy as np
import matplotlib.pyplot as plt
# Create mesh and define function space
domain = Circle(Point(0, 0), 2)
mesh = generate_mesh(domain, 64)
V = FunctionSpace(mesh, 'P', 2)

# Define boundary condition
w_D  = Expression('4*sin(3*x[0])', degree=2)

def boundary(x, on_boundary):
    return on_boundary

bc = DirichletBC(V, w_D, boundary)

# Define load
beta = 0
R0 = 0.6
p = Expression('-3*sin(x[0])',degree=1, beta=beta, R0=R0)

# Define variational problem
w = TrialFunction(V)
v = TestFunction(V)
a = dot(grad(w), grad(v))*dx
L = p*v*dx

w = Function(V)
solve(a == L, w, bc)

p = interpolate(p, V)
plot(w, title='Deflection')
plot(p, title='Load')
plot.show()


tol = 0.001  # avoid hitting points outside the domain
y = np.linspace(-2 + tol, 2 - tol, 101)
points = [(0, y_) for y_ in y]  # 2D points
w_line = np.array([w(point) for point in points])
p_line = np.array([p(point) for point in points])
plt.plot(y, 50*w_line, 'k', linewidth=2)  # magnify w
plt.plot(y, p_line, 'b--', linewidth=2)

plt.show()
